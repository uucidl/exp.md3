import containers
import noir { noir_App = App }

import kaon.canvas
import kaon.canvas { Color }
import kaon.ui {...}
import kaon.res {...}
import kaon { kaon_Sys = Sys }

import sdl

import libc

func main(argc : int, argv : char**) : int
{
    libc.printf("Hello, World\n");
    noir.app.window.init_opengl = true;
    noir.app.window.title = "Docking Demo";
    if (!noir.app_init()) {
        noir.print_and_clear_error(); libc.exit(1);
    }

    kaon_app := kaon_init(&noir.app);

    ui: ui_ctx = {
        sys = &kaon_app.sys,
        res = &kaon_app.res,
    };
    windows := WindowGroup{};
    {   
        window := window_state_by_id(&windows, 1);
        ui_anchor_left_width(&window.box, 20, 150);
        ui_anchor_top_height(&window.box, 20, 170);
    }
    {
        window := window_state_by_id(&windows, 2);
        ui_anchor_left_width(&window.box, 180, 150);
        ui_anchor_top_height(&window.box, 20, 170);
    }
    {
        window := window_state_by_id(&windows, 3);
        ui_anchor_left_width(&window.box, 40, 120);
        ui_anchor_top_height(&window.box, 200, 24+20);
    }
    while (noir.app_update()) {
        noir.print_and_clear_error();

        canvas := kaon_app.sys.surf;

        ui_begin(&ui);
        kaon.canvas.canvas_clear_with_background(canvas);
        window_group_panel: ui_panel = { box = ui.root.box };
        app_window_group_begin(&ui, &window_group_panel, &ui.root, &windows);
        {
            window_id := 1;
            window := window_by_id(&windows, window_id);
            app_window_begin(&ui, &window, &window_group_panel);
            panel : ui_panel;
            app_fun_panel(&ui, &panel, &window.container, {r=255, g=127, b=0});
            app_window_end(&window);
        }
        {
            window_id := 2;
            window := window_by_id(&windows, window_id);
            app_window_begin(&ui, &window, &window_group_panel);
            panel: ui_panel;
            app_fun_panel(&ui, &panel, &window.container, {r=255, g=0, b=127});
            app_window_end(&window);
        }

        { 
            // @todo note that we have to size the window ahead of
            // time depending on the content. The window isn't able to
            // stretch itself to fit its content. How would you do that?
            // This is a bottom-up type layout.. (Not my concern right now)
            window_id := 3;
            window := window_by_id(&windows, window_id);
            app_window_begin(&ui, &window, &window_group_panel);
            text_panel: ui_panel;
            text_panel.box = window.container.box;
            ui_label(&ui, &text_panel, &window.container, "5000 years ahead", NULL);
            app_window_end(&window);
        }
        app_window_group_end(&window_group_panel);

        ui_end(&ui);
        kaon.canvas.canvas_flush(&kaon_app.sys, canvas);
    }
    noir.print_and_clear_error();

    kaon_shutdown(&kaon_app);

    return 0;
}

func app_fun_panel(ui: ui_ctx*, pan: ui_panel*, parent: ui_panel*, color: Color)
{
    pan.box = parent.box;
    ui_panel_begin(ui, pan, parent);
    b := pan.box;
    surf := ui.sys.surf;
    kaon.canvas.canvas_color(surf, color);
    kaon.canvas.canvas_fill_rect(surf, b.left, b.top, b.width, b.height, 0);
    switch (pan.state) {
        case UI_FOCUSED: {
            kaon.canvas.canvas_color(surf, {});
            kaon.canvas.canvas_stroke_rect(surf, b.left, b.top, b.width, b.height, 0);
        }
    }
    ui_panel_end(pan);
}

// a window is a visual element which the user can
// - move
// - resize vertically
// - resize horizontally
// - resize diagonally

struct WindowGroup
{
    windows: WindowState*;
    num_windows: usize;
}

func window_state_by_id(group: WindowGroup*, window_id: int) : WindowState*
{
    containers.buf_alloc_at(&group.windows, sizeof(group.windows[0]), window_id);
    group.num_windows = containers.buf_len(group.windows);
    return &group.windows[window_id];
}

func window_by_id(group: WindowGroup*, window_id : int) : UIWindow
{
    state := window_state_by_id(group, window_id);
    return { pan = { box = state.box }, state = state };
}

struct WindowState
{
    box: ui_box;

    // interaction    
    delta_pos_x: int;
    delta_pos_y: int;
    moved: bool;
}

struct UIWindow
{
    pan: ui_panel;
    container: ui_panel;
    state: WindowState*;
}

func app_window_begin(ui: ui_ctx*, window: UIWindow*, parent: ui_panel*)
{
    ui_panel_begin(ui, &window.pan, parent);
    if (ui_id_eq(&window.pan.id, &ui.active)) {
        if (window.pan.dragged) {
            // @note this exposes that this API does not really allow working with multi-touch
            window.state.moved = true;
            window.state.delta_pos_x += ui.sys.noir.mouse.delta_pos.x;
            window.state.delta_pos_y += ui.sys.noir.mouse.delta_pos.y;
        } else if (window.pan.down) {
            window.state.moved = true;
        }
    }
    top_pad := 20;
    bottom_pad := 4;
    hpad := 4;
    ui_anchor_top_height(&window.container.box, window.pan.box.top+top_pad, window.pan.box.height-top_pad-bottom_pad);
    ui_anchor_left_width(&window.container.box, window.pan.box.left+hpad, window.pan.box.width-hpad-hpad);
    ui_panel_begin(ui, &window.container, &window.pan);

    b := window.pan.box;
    if (ui_id_eq(&window.pan.id, &ui.active) && window.pan.down) {
        canvas.canvas_color(ui.sys.surf, {r=109, g=109, b=109});
    } else {
        canvas.canvas_color(ui.sys.surf, {r=139, g=139, b=139});
    }
    canvas.canvas_fill_rect(ui.sys.surf, b.left, b.top, b.width, b.height, 0);
    canvas.canvas_color(ui.sys.surf, {255,255,255});
    canvas.canvas_line_style(ui.sys.surf, canvas.XLINE_SOLID);
    canvas.canvas_stroke_line(ui.sys.surf, b.left, b.top, b.right-1, b.top);
    canvas.canvas_stroke_line(ui.sys.surf, b.left, b.top, b.left, b.bottom-1);   
}

func app_window_group_begin(ctx: ui_ctx*, panel: ui_panel*, parent: ui_panel*, group: WindowGroup*)
{
    surf := ctx.sys.surf;

    // @todo @note this processes events with a one-frame delay, due to having to process events for all windows
    // I could put it in app_window_group_end but that does not solve the delay
    for (i:=0; i<group.num_windows; i++) {
        w := &group.windows[i];
        if (w.moved) {
            // @todo it's interesting that as soon as you allow us to move windows and let them overlap, then the question of z-order shows-up
            ui_anchor_move_x(&w.box, w.delta_pos_x);
            ui_anchor_move_y(&w.box, w.delta_pos_y);
            w.moved = false;
            w.delta_pos_x = 0;
            w.delta_pos_y = 0;
            // show snap points for this window
            for (snap_i:=0; snap_i<group.num_windows; snap_i++) {
                if (snap_i == i) { continue; }
                cw := &group.windows[snap_i];
                b := cw.box;
                canvas.canvas_line_style(surf, canvas.XLINE_DASHED);
                canvas.canvas_stroke_line(surf, b.left, panel.box.top, b.left, panel.box.bottom);
                canvas.canvas_stroke_line(surf, b.right, panel.box.top, b.right, panel.box.bottom);
                canvas.canvas_stroke_line(surf, panel.box.left, b.top, panel.box.right, b.top);
                canvas.canvas_stroke_line(surf, panel.box.left, b.bottom, panel.box.right, b.bottom);
            }
        }
    }
    ui_panel_begin(ctx, panel, parent);
}

func app_window_group_end(panel: ui_panel*)
{
    ui_panel_end(panel);
}

func app_window_end(window: UIWindow*)
{
    ui_panel_end(&window.container);
    ui_panel_end(&window.pan);
    //drag_begin, dragged, drag_end
    if (window.pan.drag_begin) {
        libc.printf("drag_begin\n");
    }
    if (window.pan.dragged) {
        libc.printf("dragged\n");
    }
    if (window.pan.drag_end) {
        libc.printf("drag_end\n");
    }
}

struct Kaon
{
    sys: kaon_Sys;
    res: Resources;
}

func kaon_init(noir: noir_App*) : Kaon
{
    app := Kaon{ sys = { noir = noir } };
    app.sys.surf = libc.calloc(1, sizeof(*app.sys.surf));
    res_init(&app.res, app.sys.surf, &g_app_resources);
    return app;
}

func kaon_shutdown(app: Kaon*)
{
    res_shutdown(&app.res, app.sys.surf);
    libc.free(app.sys.surf);
    app.sys = {};
}

var g_app_fnts : char const*[] = {
    [FONT_DEFAULT] = "assets/IBMPlexMono-Text.ttf",
};
var g_app_resources : resources_def = {
    fnt = g_app_fnts,
    fnt_cnt = sizeof(g_app_fnts)/sizeof(g_app_fnts[0]),
};

/* @todo @ion_bug inline arrays are treated as if they were compounds.

var g_app_resources : resources_def = {
    fnt = &{
        /* @todo ion has some issues with enums */
        /* @todo @ion_bug does not work (and reports issue in the wrong file)
        [FONT_DEFAULT] = , */
        /* @todo @ion_bug crashes:
        [kaon.res.FONT_DEFAULT] = "assets/IBMPlexMono-Text.ttf",*/
        [MY_FONT_DEFAULT] = "assets/IBMPlexMono-Text.ttf",    
    },
    fnt_cnt = FONT_DEFAULT + 1,
};
*/