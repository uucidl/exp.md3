import containers {...}

struct CanvasCommandQueue {
    commands: CanvasCommand*;
    num_commands: usize;
}

const RECT_FLAGS_FILLED = 1<<0;
const RECT_FLAGS_STROKED = 1<<1;

struct CanvasCommandDrawRect {
    l, t: int;
    w, h: int;
    flags: int;
    fill_color: Color;
    stroke_color: Color;
}

struct CanvasCommandDrawSegment {
    x0, y0: int;
    x1, y1: int;
    width: int;
    color: Color;
}

struct CanvasCommandDrawText {
    l, t: int;
    w, h: int;
    str: zstr;
    str_len: int;
    color: Color;
    font_height: int;
    font: GPUFontHandle;
}

struct CanvasCommandDrawImage {
    x, y: int;
    w, h: int;
    image: GPUImageHandle;
}

struct CanvasCommandScissorRect {
    l, t: int;
    w, h: int;
} 

enum CanvasCommandKind {
    COMMAND_DRAW_NOP,
    COMMAND_CLEAR,
    COMMAND_DRAW_IMAGE,
    COMMAND_DRAW_RECT,
    COMMAND_DRAW_SEGMENT,
    COMMAND_DRAW_TEXT,
    COMMAND_SCISSOR_RECT,
}

struct CanvasCommand
{
    kind: CanvasCommandKind;
    union {
        clear: Color;
        draw_image: CanvasCommandDrawImage;
        draw_rect: CanvasCommandDrawRect;
        draw_segment: CanvasCommandDrawSegment;
        draw_text: CanvasCommandDrawText;
        scissor_rect: CanvasCommandScissorRect;
    }
}

func command_push_clear(queue: CanvasCommandQueue*, clear_color: Color)
{
    command := CanvasCommand {
        kind = COMMAND_CLEAR, 
        clear = clear_color,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func command_push_rect(queue: CanvasCommandQueue*, draw_rect: CanvasCommandDrawRect)
{
    command := CanvasCommand{
        kind = COMMAND_DRAW_RECT,
        draw_rect = draw_rect,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func command_push_segment(queue: CanvasCommandQueue*, draw_segment: CanvasCommandDrawSegment)
{
    command := CanvasCommand{
        kind = COMMAND_DRAW_SEGMENT,
        draw_segment = draw_segment,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func command_push_text(queue: CanvasCommandQueue*, draw_text: CanvasCommandDrawText)
{
    command := CanvasCommand{
        kind = COMMAND_DRAW_TEXT,
        draw_text = draw_text,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func command_push_image(queue: CanvasCommandQueue*, draw_image: CanvasCommandDrawImage) {
    command := CanvasCommand {
        kind = COMMAND_DRAW_IMAGE,
        draw_image = draw_image,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func command_push_scissor_rect(queue: CanvasCommandQueue*, scissor_rect: CanvasCommandScissorRect)
{
    command := CanvasCommand{
        kind = COMMAND_SCISSOR_RECT,
        scissor_rect = scissor_rect,
    };
    buf_push(&queue.commands, &command, sizeof(command));
    queue.num_commands = buf_len(queue.commands);
}

func commands_free(queue: CanvasCommandQueue*)
{
    buf_free(queue.commands);
    queue.commands = NULL;
    queue.num_commands = 0;
}
