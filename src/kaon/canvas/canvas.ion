import codecs { LoadedImage=Image }
import kaon.utils { 
    zstr,
}
import kaon { Sys }

import libc

enum xline_style {
    XLINE_SOLID,
    XLINE_DASHED
}

struct Color {
    r, g, b: char;
}

struct Canvas {
    state: CanvasState;
    commands: CanvasCommandQueue;
}

struct CanvasVec {
    x, y: int;
}

struct CanvasLineState {
    style: xline_style;
    thickness: int;
}

struct CanvasColorState {
    color: Color;
}

struct CanvasState {
    off: CanvasVec;
    line: CanvasLineState;
    background: CanvasColorState;
    foreground: CanvasColorState;
    font: DrawableFont const*;
}

struct CanvasTextExtend {
    w, h: int;
}

struct DrawableFont {
    h: int;
    gpu_handle: FontHandle;
}

struct DrawableImage {
    w, h: int;
    gpu_handle: ImageHandle;
}

func canvas_identity(canvas: Canvas*) {
    canvas.state.off = {};
}

func canvas_clear(canvas: Canvas*, color: Color) {
    command_push_clear(&canvas.commands, color);
}

func canvas_draw_text(canvas: Canvas*, l: int, t: int, w: int, h: int, str: zstr, str_len: int)
{
    command_push_text(&canvas.commands, {
        l = l, t = t, w = w, h = h,
        str = str, str_len = str_len,
        color = canvas.state.foreground.color,
        font = canvas.state.font.gpu_handle,
        font_height = canvas.state.font.h,
    });
}

func canvas_line_style(canvas: Canvas*, style: xline_style) {
    canvas.state.line.style = style;
}
func canvas_line_thickness(canvas: Canvas*, thickness: int) {
    canvas.state.line.thickness = thickness;
}
func canvas_color_background(canvas: Canvas*, argb: Color) {
    canvas.state.background.color = argb;
}
func canvas_color(canvas: Canvas*, argb: Color) {
    canvas.state.foreground.color = argb;
}
func canvas_font(canvas: Canvas*, font: DrawableFont const*) {
    canvas.state.font = font;
}
func canvas_fill_rect(canvas: Canvas*, x: int, y: int, w: int, h: int, r: int) {
    // @todo @incomplete r is not used
    command_push_rect(&canvas.commands, {
            l=x+canvas.state.off.x, t=y+canvas.state.off.y, w=w, h=h, 
            flags=RECT_FLAGS_FILLED,
            fill_color=canvas.state.foreground.color,
    });
}
func canvas_stroke_rect(canvas: Canvas*, x: int, y: int, w: int, h: int, r: int) {
    // @todo @incomplete r is not used
    command_push_rect(&canvas.commands, {
            l=x+canvas.state.off.x, t=y+canvas.state.off.y, w=w, h=h, 
            flags=RECT_FLAGS_STROKED,
            stroke_color=canvas.state.foreground.color,
    });
}

func canvas_scissor(canvas: Canvas*, x: int, y: int, w: int, h: int) {
    command_push_scissor_rect(&canvas.commands, {l=x, t=y, w=w, h=h});
}

func canvas_stroke_line(canvas: Canvas*, x0: int, y0: int, x1: int, y1: int) {
    command_push_segment(&canvas.commands, {
        x0=x0, y0=y0, x1=x1, y1=y1,
        width=canvas.state.line.thickness,
        color=canvas.state.foreground.color
    });
}

func canvas_blit_image(dest: Canvas*, img: DrawableImage const*, dx: int, dy: int, w: int, h: int) {
    command_push_image(&dest.commands, {
        x=dx, y=dy, w=w, h=h,
        image=img.gpu_handle,
    });
}

func canvas_blit(dest: Canvas*, src: Canvas const*, dx: int, dy: int, sx: int, sy: int, w: int, h: int) {
    #assert(false);
}

func canvas_flush(sys: Sys*, dest: Canvas*)
{
    gpu_flush(sys.noir, &dest.commands);
    commands_free(&dest.commands);
}

func canvas_get_text_width(f: DrawableFont const*, txt: zstr, end: zstr) : int {
    return gpu_text_width(f.gpu_handle, f.h, txt, end);
}

func canvas_text_measure(f: DrawableFont const*, txt: zstr, end: zstr) : CanvasTextExtend
{
    return {
        w = canvas_get_text_width(f, txt, end),
        h = f.h,
    };
}

func canvas_load_font_by_filepath(canvas: Canvas*, path: zstr) : DrawableFont* 
{
    font : DrawableFont*;
    font = libc.calloc(1, sizeof(font[0]));
    font.h = 14; // @todo this interface does not allow selecting a font size.
    font.gpu_handle = gpu_load_font_by_filepath(path);
    return font;
}

func canvas_unload_font(canvas: Canvas*, font: DrawableFont*)
{
    gpu_unload_font(font.gpu_handle);
    libc.free(font);
}

func canvas_load_image(canvas: Canvas*, loaded_image: LoadedImage const*) : DrawableImage*
{
    image : DrawableImage*;
    image = libc.calloc(1, sizeof(image[0]));
    image.w = loaded_image.width;
    image.h = loaded_image.height;
    image.gpu_handle = gpu_load_image(loaded_image);
    return image;
}

func canvas_unload_image(canvas: Canvas*, image: DrawableImage*)
{
    gpu_unload_image(image.gpu_handle);
    libc.free(image);
}

